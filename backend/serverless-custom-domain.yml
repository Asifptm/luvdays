service: days-ai-chat-backend

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'ap-south-1'}
  memorySize: 1024
  timeout: 25
  environment:
    NODE_ENV: ${env:NODE_ENV}
    MONGODB_URI: ${env:MONGODB_URI}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRE: ${env:JWT_EXPIRE}
    FASTAPI_URL: ${env:FASTAPI_URL}
    CORS_ORIGIN: ${env:CORS_ORIGIN}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"

functions:
  api:
    handler: lambda.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: '*'
    environment:
      MONGODB_URI: ${env:MONGODB_URI}
      JWT_SECRET: ${env:JWT_SECRET}
      JWT_EXPIRE: ${env:JWT_EXPIRE}
      FASTAPI_URL: ${env:FASTAPI_URL}
      CORS_ORIGIN: ${env:CORS_ORIGIN}
  
  health:
    handler: lambda.healthHandler
    events:
      - httpApi:
          path: /health
          method: GET
    environment:
      CORS_ORIGIN: ${env:CORS_ORIGIN}

# Custom Domain Configuration
custom:
  customDomain:
    domainName: api.luvdays.com
    stage: ${self:provider.stage}
    createRoute53Record: false
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: http
    certificateArn: arn:aws:acm:ap-south-1:402222277574:certificate/8ef05ec9-c48f-4e63-acf9-536624bbc8c2
  
  serverless-offline:
    httpPort: 5000
    lambdaPort: 3002
    noPrependStageInUrl: true
  
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    concurrency: 10

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-domain-manager
